1.title
 Code Organization With Function （函数设计合理，构造好的代码结构）
2.introduction
  把成熟的代码包装起来，封装成为函数，提供给程序反复使用。我们本课程，面对字符串信息的，开展函数设计合理，构造好的代码结构，为下一课的写项目做好基础准备。
  本课构建了字符串分析处理的几个的基本函数： 
  search(s , ch) ，利用这个函数，我们可以得到字符ch在字符串 s 的每次出现的索引位置，结果以数组形式返回。
  lengthOfArray(arr)，用来返回数组或字符串的长度。
  substring(s,p1,p2) ，用来返回字符串s的子串，参数中 ，s为传入的字符串，运行substring函数则把字符串s的下标从p1至p2的子字符串取出返回，其中子串包含p1位置，而不包含p2位置。若仅存在p1参数，则子串的产生则是从s的p1到s的最后结束位置。
3.keyword
  function  ,  return ,  ! ,  === , parseInt  ,  ||  ，for ， while 。

4.project
<a src=001.html title=构建基本的字符串函数> 本例构建了字符串分析的基本函数，search(s , ch) 和lengthOfArray(arr)，并用这两个函数尝试了对唐诗文本的分析。
<a src=002.html title=字符串函数在唐诗文本中的应用> 本例再增加一个字符串处理的基本函数 —— substring(s,p1,p2) ，用来返回字符串s的子串，参数中 ，s为传入的字符串，运行substring函数则把字符串s的下标从p1至p2的子字符串取出返回，其中子串包含p1位置，而不包含p2位置。若仅存在p1参数，则子串的产生则是从s的p1到s的最后结束位置。 

5.reading
对字符串的搜索、获取字符串长度，从字符串中的取出子串等等这些常用功能，任何现代语言中已经有内置的函数了，为什么我们用自创的代码来实现系统中已经有的函数？为什么不教初学者去直接使用，而是要去尝试自己去亲自探索底层代码的实现？这是不是“重复造轮子” ？
为了回答以上疑问，初学者需要理解二种的情况：
一是你现处于建立编程的理解体系和锻炼代码能力的时候， 还缺乏编程的抽象能力和算法能力。此时用较为底层的代码来探索和尝试实现系统已有的功能，这对锻炼算法，提高抽象能力是非常重要的。没有这些训练，你写的代码在质量上可能会长期停留在较低水平。
二是你已经具备了较强的代码和算法能力。如果是这种情况，除非是偶尔为了训练写算法的思维，你当然不需要浪费时间去重复写已经掌握的代码和算法。尤其在工作中，我们必须使用现成的函数，而不去建议去临时创建自己的函数，否则有很大概率引入bug。如果你有强迫症，喜欢自己写出所有代码，而在这期间，又没有学到新的知识或得到能力的提高，发生这种情况，就是“重复造轮子”。