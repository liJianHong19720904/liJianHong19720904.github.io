1.title
  A Visual Keyboard for CET Project（开发篇：CET项目第3阶段，为移动端写一个虚拟键盘程序）
2.introduction
   通过前面课程，CET项目核心功能基本完备，尽管目前的界面还比较粗陋，但可以在功能看基本能够使用了。但问题是，当前程序只能用在配备键盘的计算机系统（PC端）中，不可用于移动端（没有实体键盘）计算机系统。人们已经习惯使用移动端的虚拟体键盘，本课我们正好综合浏览器的几个简单API和后续想法，为这个CET项目增加一个虚拟键盘键盘，在操作上，实现实体键盘操作和虚拟键盘同步。本课把开发过程分成四个案例，也算是对问题的逐步分析、深入和求精，找到解决方案后，有时候仅简单的几条代码，就能实现我们对软件的独特的需求和想法。
3.keyword
 overflow: hidden ， window.innerWidth ， window.innerHeight ， document.body.style.fontSize ， document.body.style.height ， document.createElement ， kbDom.appendChild ，keyDom.onclick = function(){ } ， key.style.display = 'none' 。
	
4.project
  <a src=cet-16.html title=根据用户屏幕动态生成UI>本例让CET程序能动态适应不同屏幕，并实现全屏显示。考虑到移动端屏幕的多样化形态，本例先通过评估前面的CSS代码，通过动态获取用户屏幕窗口尺寸，实现了程序页面的全屏显示，最后实现动态设置各级字体的大小，让不同屏幕都能有较大清晰的字体效果，各类不同尺寸屏幕设定合适的字体大小。
  <a src=cet-17.html title=生成虚拟键盘界面>运用CSS设计按钮外观、利用JavaScript动态生成DOM元素，初步实现字母按钮和功能按钮，完成虚拟键盘的UI外观。通过代码生成能够适应各类不同尺寸屏幕的虚拟键盘程序的界面。
  <a src=cet-18.html title=实现虚拟键盘与实体键盘同步>第三步，以实体键盘控制代码为参考，为虚拟键盘按键响应设定同样的控制代码，初步实现虚拟键盘对程序内部Model控制功能，让虚拟键盘这些按钮与实体键盘在CET中具有同样功能。
  <a src=cet-19.html title=实现动态变化的虚拟键盘>第四步，实现虚拟键盘字母按键的动态消失和出现，让移动端用户点击字母更加方便。调整了代码结构，将创建虚拟键盘和调整页面代码模块一起打包到 View.initVkeys 函数中，在Controller中安排调用View.initVkeys() 。 最后在Model.getReadyWords方法中，增加了虚拟键盘字母按键的动态消失/出现的代码模块。本例还解决了程序的瑕疵，比如为解决用户觉得光标闪烁太快，而产生刺眼感觉，我们降低了异步代码的光标变化频率，但这种改动又造成新问题，比如用户键盘响应变慢，为了解决键盘响应及时，我们在键盘事件处理中，修改代码，直接使用View.inputDom.textContent = Model.inputWord ;，解决了一个个问题，但整个代码组织此时又显得复杂起来，下一步必须增加文档说明，甚至需要绘流程图，以理清各个代码模块快的次序和逻辑。如果我们继续把这个项目实施下去，将进入软件开发模式和软件工程的学习和实践，限于篇幅我们就不在本课程中展开。至此，本项目作为“大学英语等级考试单词训练器”的原型就算完成，对这个原型多加使用会发现，我们会冒出许多新需求和想法，也就是说对你而言，真正的软件开发才刚刚开始，而本课的引入门的任务就算完成，课程在此处打住，祝各位开发者不懈追求代码能力的提高，在学习过程中真正体验写代码和项目的乐趣。
   

5.reading

Object-Oriented
JavaScript is an object-oriented language, which often surprises developers who have previously looked at the language and dismissed it. Anything you look at in a piece of JavaScript code has a good chance of being an object. Only five primitive types are not objects: number, string, boolean, null, and undefined, and the first three have corresponding object representation in the form of primitive wrappers (discussed in the next chapter). Number, string, and boolean primitive values are easily converted to objects either by the programmer or sometimes behind the scenes by the JavaScript interpreter. Functions are objects, too. They can have properties and methods. 
The simplest thing you do in any language is define a variable. Well, in JavaScript when you define a variable, you’re already dealing with objects. First, the variable  automatically becomes a property of an internal object known as an Activation Object (or a property of the global object if it’s a global variable). Second, this variable is actually also object-like because it has its own properties (called attributes), which determine whether the variable can be changed, deleted, or enumerated in a for-in loop. 
So what are the objects? Because they do so many things they must be quite special. Actually they are extremely simple. An object is just a collection of named properties, a list of key-value pairs (almost identical to an associative array in other languages). Some of the properties could be functions (function objects), in which case we call them methods. 
And one last thing to keep in mind is that there are two main types of objects:
 Native -- Described in the ECMAScript standard .
 Host   -- Defined by the host environment (for example, the browser environment) .
 The native objects can further be categorized as built-in (for example, Array, Date) or user-defined ( var o = {}; ) . 
 Host objects are, for example, window and all the DOM objects. If you’re wondering whether you’re using host objects, try running your code in a different, nonbrowser environment. If it works fine, you’re probably using only native objects.


