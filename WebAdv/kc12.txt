1.title
  From Object to DOM（探索篇：内存对象和Web页文档对象模型）
2.introduction
  对象这种数据结构可以把许多简单数据组合起来，形成人们更易理解和管理的信息集合。前面我们尝试了JavaScript建立对象的几种方法，但用这些方法建立的对象在哪里，这些对象与Web页面有关系吗？本课开始前，需要讨论这个问题。
  代码创建的对象，不管是系统内置对象，还是自定义对象，如同其他的数字数据一样，都存在于计算机内存中，因此对象都是内存对象，可以为代码提供高速的访问，在开发者的Console命令行中，可以用Console.log输出查看这些对象信息。
  Web页提供了基于DOM技术的丰富的UI生成能力，本课我们思考如何把这类内存对象，用Web元素的形式表现在Web页面上，形成一种更加内涵丰富的输出形式。本课实践中，我们利用五个案例，同时演示了创建内存对象和Web页的DOM对象，再通过设计一个逻辑，把内存对象和Web页的DOM对象关联起来。最后，在Web页面上把DOM对象渲染出来，似乎我们就实现了把抽象的内存对象输出在Web页面了，这是实践应用软件建模的初步思想。

3.keyword
  width:20%; ，height:20%; ， display:inline-block; ， background-color:rgba(0,0,0,0.1); ， document.createElement('div')  ，document.createElement('p')  ，父元素.appendChild(子元素) ，div.style.borderColor ，div.style.height  ，内存对象.divDom.style.left  ，内存对象.divDom.style.display 。 
	
4.project
  <a src=objDom-1.html>本例演示用JavaScript语言在Web页，用代码动态（在程序运行的时刻，on the fly）向Web页添加元素对象。
  <a src=objDom-2.html>本例稍微把Dom操作的代码片段移动位置，就实现在Web页生成100个矩形，且不会有报错信息，需要从Web页内存模型建立的角度理解和分析这种现象。
  <a src=objDom-3.html>本例在构造函数创建对象模型基础上，利用Web的DOM技术展现内存信息的可视化外观！
  <a src=objDom-4.html>本例在构造函数创建对象模型，利用DOM技术创建“UI外观”基础上，再利用点击事件（异步代码入门）来逐一展现对象外观！
  <a src=objDom-5.html>本例利用onmouseover事件触发对象的移动动画，为实现异步代码能获取变量不断变化的数据，我们引入了函数闭包概念和js变量作用域的lexical语法，本例难度较大，仅作学有余力的学习者参考，一般无需掌握。
5.reading

Understanding the DOM is key to being able to manipulate the text or HTML in a web page. Using the DOM, you can create animations, update data without refreshing web pages, move objects around in a browser, and much more! 
The Document Object Model is the interface for JavaScript to talk to and work with HTML documents inside of browser windows. The DOM can be visualized as an inverted tree, with each part of the HTML document branching off of its containing part.
A DOM tree is made up of individual components, called nodes. The main node, from which every other node springs, is called the document node. The node under the document node is the root element node. For HTML documents, the root node is HTML. After the root  node, every element, attribute, and piece of content in the document is represented by a node in the tree that comes from another node in the tree.
