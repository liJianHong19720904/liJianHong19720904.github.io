1.title
   Input Approaches For JavaScript program（起步篇：通过Web页为 JavaScript程序输入信息）
2.introduction
  任何计算机程序都包含信息输入、数据处理、输出结果三个环节，输出在上一课，处理则在每一课，本课则了解独特的通过Web页让操作者输入信息的方法。这种基于浏览器环境，由JavaScript标准控制的输入，很便利也是是其他语言环境完全不可能具备的功能，或许让其他领域的开发者可以感受到Web开发的便利。
  当然，本课涉及的英语词汇和对浏览器环境的理解似乎较多，需要花费时间学习，特别再初级开发者的学习初期，Dom对象的常用API和属性这种英文全拼形式需要适应。
  我们将通过本节课的四个难度逐渐递进的案例完成学习，Web Front有关知识的增加比较重要，但更重要的是代码能力的提升。具体而言，则是在案例中为让程序更有智能和判断力，而书写的一些逻辑和算法表达。

3.keyword
  Math ，floor ，random ，prompt（API），parseInt ， document.querySelector（API） ， document.querySelectorAll（API）  ，Web页的元素变量.onclick ，Web页的元素变量.textContent , function 定义  , 有名function , 匿名function 。 
	
4.project
  <a src=guessNum-1.html>本例使用Math对象有一些常用方法，用于解决常见数学问题。
  <a src=guessNum-2.html>本例结合While循环，实现猜数游戏，猜中成功率的算法是难点。
  <a src=guessNum-3.html>本例使用Web页的DOM元素实现UI界面，本例大量使用了匿名函数，并把匿名函数赋值给按钮元素的onclick属性，初步完成有界面的猜数游戏。由于本程序没有合理算法，显得程序智力很差，这个算法难点将由下面案例解决。
  <a src=guessNum-4.html>本例使用了二分法算法，能应对用户输入的各种情况，完善猜数游戏，程序在最后还定义了一个函数（名称：yourAreCheating），对用户是否作弊进行判断。
  
5.reading
 Accessing DOM Nodes . The document object in the DOM identifies the page itself, and more often than not will serve as the starting point for our DOM crawling. The document object comes with a number of standard properties and methods for accessing collections of elements. 
By id attribute value . document.getElementById()  . This method returns a single element based on that element’s ID (the value of its id attribute), which we provide to the method as an argument. For example, to access this particular image  : <img src="photo.jpg" alt="" id="lead-photo">  . we include the id value as an argument for the getElementById() method: var photo = document.getElementById("lead-photo");

By element name . We can access individual elements by the tags themselves, using document.getElementsByTagName(). This method retrieves any element or elements you specify as an argument.  For example, document.getElementsByTagName("p") returns every paragraph on the page, wrapped in something called a collection or nodeList, in the order they appear in the document from top to bottom. nodeLists behave much like arrays. To access specific paragraphs in the nodeList, we reference them by their index, just like an array .  var paragraphs = document.getElementsByTagName("p"); Based on this variable statement, paragraphs[0] is a reference to the first paragraph in the document, paragraphs[1] refers to the second, and so on. If we had to access each element in the nodeList separately, one at a time… well, it’s a good thing we learned about looping through arrays earlier. Loops work the exact same way with a nodeList.

By selector . document.querySelectorAll()  . This method allows you to access nodes of the DOM based on a CSSstyle selector. The syntax of the arguments in the following examples should look familiar to you. It can be as simple as accessing the child elements of a specific element:  var sidebarPara = document.querySelectorAll(".sidebar p");  or as complex as selecting an element based on an attribute:  var textInput = document.querySelectorAll("input[type='text']"); 

