1.title
  Object Construction（探索篇：构建程序需要的自定义对象）
2.introduction
  从信息规范组合的层面看，对象是符合我们人类思维的一种信息组合方式，在用计算机中，所有数据本质上都是0和1，底层软件系统再把这些浩瀚的0和1，以数字和字符方式规范组合，则实现了能方便人们表述的十进制和字母。
  在现代高级程序设计语言中，在数字和字符等基本数据之上，构建对象这种更高层次的数据结构可以进一步方便人们处理复杂信息的需求，现代高级语言也都有面向对象的程序设计机制，JavaScript却为我们提供了一种最简洁方法来定义和管理对象，非常适合从未学习过其他高级语言面向对象设计的开发者入门。
  本课我们利用四个案例，通过写代码来构建自己设计的对象。分别演示了从手工创建对象到利用函数自动创建对象的二种重要方式，用JavaScript函数高效构建对象的函数称之为构造函数。

3.keyword
  { } ，对象名 = {对象值};  ，对象名.属性 ， 对象名.方法 ，this  ，function 构造函数(形参列表) ，条件 ? 真执行 : 假执行 ; ， new 构造函数（实参列表）  。 
	
4.project
  <a src=object-1.html>本例演示在JavaScript语言中，用最简单的符号 ： { 和 }，创建自定义对象。另外，本例和下面的所有案例都要使用Console面板查看结果。注意：PC端的浏览器才具备开发者面板，也是学习本课的基本条件。
  <a src=object-2.html>本例演示创建对象之后，再利用函数，把对象变量作为实参传给函数，演示了函数的抽象可解决代码重复问题。另外，函数也是JavaScript中最重要的语法，这个例子也演示了函数的形参和实参的语法，表明函数的形参和实参名称和类型的设定非常自由。
  <a src=object-3.html>本例把前面案例的函数定义为对象的私有方法，这样，既能按功能组织代码，也避免了多产生一个全局变量。本例代码演示了对象和函数的一个重要关系：在JavaScript中，函数本身作为代码，也可以成为对象的属性，只是我们称之为方法，可以运行。在JavaScript中，函数本质上和数字、字符、对象这种数据有个共同点，都是可以复制和传递的，我们称数据内容为之为值（value），称引用数据内容的符号名为变量（binding）。
  <a src=object-4.html>本例利用构造函数创建对象，表明了对象实例的创建可实现程序的自动化，本例还展示了“问号表达式”，简洁地用一条语句处理if/else逻辑，这是JavaScript作为现代高级语言的特色之一，熟练使用可以有效降低代码量。本例用循环反复调用构造函数，产生了较多对象实例，因此还用代码对数据做了统计，本例表明当程序的信息量较大时，用Console.log输出和分析数据对编程者更加方便。而HTML和CSS结合在Web页的输出，只是符合广大使用者需求，编程者若无此需求，则无需增加更多无谓工作。
  
5.reading
Numbers, Booleans, and strings are the atoms that data structures are built from. Many types of information require more than one atom, though. Objects allow us to group values----including other objects---to build more complex structures.
The programs we have built so far have been limited by the fact that they were operating only on simple data types. This chapter will introduce basic data structures--Data Structures: Objects and Arrays. By the end of it, you’ll know enough to start writing useful programs.
 Functions are the bread and butter of JavaScript programming. The concept of wrapping a piece of program in a value has many uses. It gives us a way to structure larger programs, to reduce repetition, to associate names with subprograms, and to isolate these subprograms from each other.
The most obvious application of functions is defining new vocabulary. Creating new words in prose is usually bad style. But in programming, it is indispensable.
Typical adult English speakers have some 20,000 words in their vocabulary. Few programming languages come with 20,000 commands built in. And the vocabulary that is available tends to be more precisely defined, and thus less flexible, than in human language. Therefore, we usually have to introduce new concepts to avoid repeating ourselves too much.

