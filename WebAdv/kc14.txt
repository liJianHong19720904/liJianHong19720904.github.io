1.title
    Event  ,Mouse Event and Asynchronous Code （探索篇：事件、鼠标事件和异步代码）
2.introduction
  人们可以和Web页面发生互动，这也是Web相对传统媒体最大优势，在传统软件开发中，人与计算机软件的互动代码是难以实现的，因为人的速度与计算机的速度差别在几个数量级以上。而Web和JavaScript使用了一种称为事件和事件处理函数的机制，创新的解决了了Web互动程序的设计问题。
  本课本课我们以Web浏览器本身读入网页和鼠标事件为例，了解事件和异步程序的概念，为聚焦学习深度，我们无须列出所有的事件，仅以三个常用事件为例，深入探索事件原理，对象事件的一些细节。
  由于计算机执行代码的速度极快，从代码运行角度看，一般所有代码（非事件处理函数）都是同步执行的，前面的代码没有执行完成，后面的代码就不能执行，对我们人类而言，若感知到这种情况，就会感觉计算机“死机”或“卡住”了。
  而Web页面上所有事件中的代码都是都异步运行的，异步程序是初学者很难真正理解的概念，但JavaScript在很早就让学习者能写出事件驱动的代码，正如前面课程我们给按钮onclick事件写代码，或许到这里我们已经可以开始深刻理解事件和异步代码了。
  本课程实践部分共5个案例，前四个案例引入了事件有关知识，内容较多，需要学习者一一测试和梳理概念。在最后一个案例为了效果，而增加了生成动画的代码和方法，这个案例的代码不仅需要学习者理解异步代码，还需要学习者练习抽象分析问题和解决问题的能力。有兴趣学习的学习者可以通过反复调试代码，构建抽象分析能力和用代码解决问题的能力。

3.keyword
  events ，window.onload ，onclick ，onmouseover ，onmousemove ，onmousedown ，onmouseup，Event Object，clientX ，clientY ，canvas ，context ，prototype 。 
	
4.project
  <a src=events-1.html title=Web页读入浏览器的事件>本例需要启用开发者的Console面板，通过window.onload事件，了解“Web页文件加载浏览器完成”事件，可以上课时在代码中加入时间对象，测量本机加载本文件的时间。window.onload 也代表Web页中所有元素在浏览器中创建完成这件事件的发生，这是一个重要的事件。所有的DOM操作操作代码都基于这件事件发生之后。
  <a src=events-2.html title=读取gif动画和动态创建Web页元素>本例结合前面课程动态图片案例，读取网络上一张动态gif图，然后利用JavaScript程序，在页面上动态生成了50个img图像元素。为深刻理解window.onload事件，这段代码的位置需要在课堂演示，放在window.onload函数外面，body元素产生之前的位置，可以通过试错来理解事件发生的时间次序。
  <a src=events-3.html  title=“滕王阁美景”程序>本例在前面案例基础上，设计一个比较酷炫的互动，点击鼠标后，小鸟会陆续飞到鼠标点击的位置。这个案例需要使用异步代码解决小鸟“陆续飞”移动的难题，在算法上的有一些难度，整个核心代码不足百行，但运用了一些技巧，完成本例需要一些编写的经验。
  <a src=animation-1.html title=构建对象和Canvas作图的初步研究>本例综合了探索HTML5内置的Canvas对象的强大作图能力，产生100个随机球！JavaScript语言的强大而简洁的对象构建能力，  面向对象程序设计中，初学者一般都会难以短期掌握其中较抽象概念，本例再次使用构造函数创建对象。
  <a src=animation-2.html title=Canvas强大的Web作图和动画秀> 探索HTML5内置的Canvas对象的强大作图能力，产生100个随机球！  本例充分利用JavaScript语言的强大而简洁的对象构建能力，利用prototype原型、constructor构造函数、this等概念，以极高的效率搭建了一个动画程序。
 
5.reading
Web pages are much more than just static displays of text and graphics. JavaScript gives web pages interactivity and the ability to perform useful work. An important part of JavaScript’s ability to perform useful functions in the browser is its ability to respond to events.
Events are the things that happen within the browser (such as a page loading) and things the user does (such as clicking, pressing keys on the keyboard, moving the mouse, and so on). Events happen all the time in the browser.
The HTML DOM gives JavaScript the ability to identify and respond to events in a web browser. Events can be divided into groups according to what HTML elements or browser objects they apply to. 
When JavaScript does something in response to these events, it’s called event handling.
The first system for handling events was introduced along with the first versions of JavaScript. It relies on special event handler attributes, including the onclick event handler. 
The inline event handler attributes are formed by adding the prefix on to an event. To use them, add the event attribute to an HTML element. When the specified event occurs, the JavaScript within the value of the attribute will be performed.
Although the previous  methods of event handling are very commonly used and are supported by every browser, a more modern and flexible way to handle eventss (and the recommended way for new browsers) is to use the addEventListener() method.
The addEventListener method listens for events on any DOM node and triggers actions based on those events. When the function specified as an action for the event runs, it automatically receives a single argument, the Event object. By convention, we name this argument e.
