1.title
    Programming Time -- From Event To Asynchronous Code （探索篇：对时间编程，从事件处理到异步代码）
2.introduction
  前面课程中，我们通过为Web页面中的元素设定互动属性，为属性赋予事件处理函数，就实现了Web页内与人们互动的UI。这种看似简单的UI编写代码的模式是Web这个开发平台的相对优势，因为用任何其他语言或开发环境，仅凭十几条代码来实现人机互动的代码是不可能的。
  本课程中，我们从计算机的角度再次来分析这种事件处理的代码，我们知道，计算机代码肯定是在逻辑的控制下，一条条从上向下执行的，而这些事件处理代码很特殊，不是按套路出牌的。这就是我们在本课探索的重点---异步代码，因其执行的触发条件是不确定的，管理好这种代码是非常不容易的，而我们本课通过深入研究和编写这种代码，会发现我们可能进入了一个“新领域”。
  人察觉事物的速度与计算机输出的速度的差别可能在亿万倍以上，随着软硬件发展，计算机和软件会不断地加快，人类的感觉和行动的速度相对是不变的。 由于计算机执行代码的速度极快，从人的角度感觉代码的运行，会误解代码（非异步代码）都是同时执行的，我们称为同步代码，实际上在前面的代码没有执行完成之前，后面的代码是不能执行的。如果发生了我们人类能感知到“停滞”，其实，要么是计算机处理的信息量极大，感觉计算机“卡住”了，要么就是我们写错了代码。但实际上，以今天的计算机能力，大多数时候程序出现我们能感知的卡顿，都是因为我们编写了死循环的代码，导致计算机代码的执行被限制在一个代码片段内，其循环或许已经执行了数以亿次，但无法达到离开循环的条件。
  
  本课程实践部分共5个案例，分二个部分，第一步部分的第一个案例结合浏览器读取Web页的事件，让学习者利用onload和onclick事件，对简单的异步代码能做出总结。案例二至案例三在此基础上，围绕代码效果一步步增加同步和异步代码，结合前面的图像对象的控制编程实现了一个效果比较不错的“滕王阁美景”程序。
  第二部分则探索式地引入了HTML5标准下Web中强大API的canvas对象，作为代码输出环境，综合了学习者在前面学习的JavaScript对象构建，同时引入对象的原型概念，把计算机图形绘制、时间编程做了较好地结合，最后以极高的代码效率搭建了一个动画程序。由于本例涉及本课程从未练习过的Canvas对象及其许多API，我们在大学教学中，仅建议把本例推荐有兴趣成为Web语言专家级的学生，并不要求大多数学生掌握。因为Canvas和动画编程是在基本的JavaScript掌握之后，还有兴趣深入到Web计算机图形和动画开发领域的学习内容。

3.keyword
  event ，window.onload ，onclick ，onmousemove  ，Event Object，clientX ，clientY ，canvas ，context ，prototype ，this ，requestAnimationFrame 。 
	
4.project
  <a src=events-1.html title=Web页读入浏览器的事件>本例需要启用开发者的Console面板，通过window.onload事件，了解“Web页文件加载浏览器完成”事件，可以上课时在代码中加入时间对象，测量本机加载本文件的时间。window.onload 也代表Web页中所有元素在浏览器中创建完成这件事件的发生，这是一个重要的事件。所有的DOM操作操作代码都基于这件事件发生之后。
  <a src=events-2.html title=读取gif动画和动态创建Web页元素>本例结合前面课程动态图片案例，读取网络上一张动态gif图，然后利用JavaScript程序，在页面上动态生成了50个img图像元素。为深刻理解window.onload事件，这段代码的位置需要在课堂演示，放在window.onload函数外面，body元素产生之前的位置，可以通过试错来理解事件发生的时间次序。
  <a src=events-3.html  title=“滕王阁美景”程序>本例在前面案例基础上，设计一个比较酷炫的互动，点击鼠标后，小鸟会陆续飞到鼠标点击的位置。这个案例需要使用异步代码解决小鸟“陆续飞”移动的难题，在算法上的有一些难度，整个核心代码不足百行，但运用了一些技巧，完成本例需要一些编写的经验。
  <a src=animation-1.html title=构建对象和Canvas作图的初步研究>本例综合了探索HTML5内置的Canvas对象的强大作图能力，产生100个随机球！JavaScript语言的强大而简洁的对象构建能力，  面向对象程序设计中，初学者一般都会难以短期掌握其中较抽象概念，本例再次使用构造函数创建对象。
  <a src=animation-2.html title=Canvas强大的Web作图和动画秀> 探索HTML5内置的Canvas对象的强大作图能力，产生100个随机球！  本例充分利用JavaScript语言的强大而简洁的对象构建能力，利用prototype原型、constructor构造函数、this等概念，以极高的效率搭建了一个动画程序。
 
5.reading
Web pages are much more than just static displays of text and graphics. JavaScript gives web pages interactivity and the ability to perform useful work. An important part of JavaScript’s ability to perform useful functions in the browser is its ability to respond to events.
Events are the things that happen within the browser (such as a page loading) and things the user does (such as clicking, pressing keys on the keyboard, moving the mouse, and so on). Events happen all the time in the browser.
The HTML DOM gives JavaScript the ability to identify and respond to events in a web browser. Events can be divided into groups according to what HTML elements or browser objects they apply to. 
When JavaScript does something in response to these events, it’s called event handling.
The first system for handling events was introduced along with the first versions of JavaScript. It relies on special event handler attributes, including the onclick event handler. 
The inline event handler attributes are formed by adding the prefix on to an event. To use them, add the event attribute to an HTML element. When the specified event occurs, the JavaScript within the value of the attribute will be performed.
Although the previous  methods of event handling are very commonly used and are supported by every browser, a more modern and flexible way to handle eventss (and the recommended way for new browsers) is to use the addEventListener() method.
The addEventListener method listens for events on any DOM node and triggers actions based on those events. When the function specified as an action for the event runs, it automatically receives a single argument, the Event object. By convention, we name this argument e.
