1.title
   Event Object and Asynchronous Code （探索篇：鼠标事件对象和异步代码）
2.introduction
  人们利用对象的思维划分计算机中的复杂的信息，本课我们以Web浏览器端鼠标事件为例，为聚焦学习深度，我们不列出所有的事件，仅以三个常用事件为例探索对象事件的一些细节和原理，。从代码运行角度看，所有事件发生都异步的，尽管异步程序是初学者很难真正理解的概念，但JavaScript在很早就让学习者能写出事件驱动的代码，学习到这里，或许你已经开始深刻理解事件和异步代码了。本课程实践部分前面四个案例比较基础，但最后一个案例综合性较强，需要充分掌握前面一些编码的技能，才能分析和解决新问题。

3.keyword
  events ，onclick ，onmouseover ，onmousemove ，onmousedown ，onmouseup，Event Object，clientX ，clientY ，pageX  ，pageY  ，` ${ } ` ，DOM.style.left ，DOM.style.top ，opacity  ，border-radius。 
	
4.project
  <a src=events-1.html>Events事件和异步代码第一步，本例用javascript控制DOM事件，利用CSS的class类切换，实现动态鼠标交互效果。本例也可演示Web页中事件的冒泡机制。
  <a src=events-2.html>浏览器支持的鼠标指针API：clientX、clientY 和 pageX、pageY，这二个读取鼠标坐标的API似乎一模一样，但在页面有滚动栏时，坐标数据会有不同。
  <a src=events-3.html>本例在之前案例基础上，读取网络一张动态gif图，然后动态生成了50个img图像元素。
  <a src=events-4.html>本例随机设定了50张gif图的属性，让每个gif图像的位置和样子产生变化，并利用异步代码（这里使用了setTimeout），异步把小鸟动态图逐一添加到Web页，本例还增加了一个圆形跟随鼠标。
  <a src=events-5.html>本例在前面案例基础上，设计一个比较酷炫的互动，点击鼠标后，小鸟会陆续飞到鼠标点击的位置。这个案例需要使用异步代码解决小鸟“陆续飞”移动的难题，在算法上的有一定难度，完成本例需要一些编写的经验。
 
5.reading
Web pages are much more than just static displays of text and graphics. JavaScript gives web pages interactivity and the ability to perform useful work. An important part of JavaScript’s ability to perform useful functions in the browser is its ability to respond to events.
Events are the things that happen within the browser (such as a page loading) and things the user does (such as clicking, pressing keys on the keyboard, moving the mouse, and so on). Events happen all the time in the browser.
The HTML DOM gives JavaScript the ability to identify and respond to events in a web browser. Events can be divided into groups according to what HTML elements or browser objects they apply to. 
When JavaScript does something in response to these events, it’s called event handling.
The first system for handling events was introduced along with the first versions of JavaScript. It relies on special event handler attributes, including the onclick event handler. 
The inline event handler attributes are formed by adding the prefix on to an event. To use them, add the event attribute to an HTML element. When the specified event occurs, the JavaScript within the value of the attribute will be performed.
Although the previous  methods of event handling are very commonly used and are supported by every browser, a more modern and flexible way to handle eventss (and the recommended way for new browsers) is to use the addEventListener() method.
The addEventListener method listens for events on any DOM node and triggers actions based on those events. When the function specified as an action for the event runs, it automatically receives a single argument, the Event object. By convention, we name this argument e.
