1.title
  Learn Number With Make  Basic Function （探索篇：编写基本的函数，探索计算机中的数字）
2.introduction
  在计算机程序中，任何数据的本质上都是二进制，而计算机高级语言可以这些数据按不同类型管理，并为不同类型规范操作，这才让计算机内的数据与我们现实信息对应起来。
  因此数字是本质，才有了我们后来所谓的数字化，在之前课程中，虽然我们已经多次使用数字类型，但并不意味这我们已经理解这种最基本的数据类型--数字类型，本课程通过JavaScript函数的练习，我们通过代码探索数字类型——Number，同时通过十进制和二进制转换的案例做算法和逻辑的演练。
  本课仍然通过几个难度逐渐递进的案例完成学习，前二个案例通过浏览器后台输出，探索二进制表达范围，同时也会训练在代码中定义和使用函数。后三个案例则需要比较综合应用浏览器端的基本只是，比如使用HTML/CSS和事件处理函数创建一个简单UI，通过代码实现了简单加法训练的WebApp。

3.keyword
  function ，return ，console.log ，!== ， === ，% ，parseInt ，UI（HTML/CSS） ，<input> ，type="text"  ，type="button"  ， value ，onclick ， aArray = [ ] ， aArray.length 。 
	
4.project
  <a src=../../WebBasic/images/exOfWeb.html  title=使用本站WebCMD，以“命令行”方式建立数学概念>本例先使用本站开发的命令行界面，使用Math对象定义的pow函数，为学生复习或建立数学的2的n次方的概念，为下面自己编写代码和建立自定义函数建立一些感性认知。 建议输入 Math.pow(2,0) 、Math.pow(2,1)、Math.pow(2,8)、Math.pow(2,32)、Math.pow(2,64) 等。在此基础上，利用1/0建立Infinity的数字概念，对有兴趣的学生，提出为什么： Math.pow(2,64) - 100  全等于 Math.pow(2,64)， 0.1 + 0.2 不等于0.3 的问题，引入计算机对数字表达和计算的局限性问题。
  <a src=binary-1.html  title=自定义函数探索二的N次幂计算>本例通过自定义函数power2(x)，理解计算机内的二进制数字。
  <a src=binary-2.html  title=探索js语言的Infinity保留字，测试浏览器>本例探索经典的32位、64位、128位二进制数的十进制范围，学习函数的定义和调用。利用循环，研究JavaScript定义的Infinity这个所谓的最大值。
  <a src=mathOfChild-1.html  title=用CSS语言制作一个UI>本例用HTML/CSS创建一个简单UI，用于小学一年级算术训练程序， 本版程序先沿用传统高级语言习惯，创建了三个内存变量，全局变量，用于存放二个加数和答案 。另外，还创建了用于指向Web页输出的Dom对象，共计7个DOM元素共同组成了本APP的UI界面。。
  <a src=mathOfChild-2.html title=引入函数改进数据的质量>本例继续上例改进程序，试图解决上一例几个存在的问题：多次运行题目重复、答案选项总在D项问题、答案可能重复。	本版程序对UI界面做了改进，一是使用了CSS对按钮类型的选择，二是实现了反馈输出区域。
  <a src=mathOfChild-3.html title=小学一年级算术训练程序（含bug版）>本例继续上例改进程序，本版程序，实现了更强的可用性。为实现下一题按钮功能，本例尝试引入和利用JavaScript自定义函数概念，让学生尝试理解代码的功能分块和浅尝函数对代码的“封装”。同时因为函数的内部局部变量可以发生对比，也尝试在学生头脑中建立全局变量的概念。
  
5.reading

 Inside the computer’s world, there is only data. You can read data, modify data, create new data——but that which isn’t data cannot be mentioned. All this data is stored as long sequences of bits and is thus fundamentally alike.

 Bits are any kind of two-valued things, usually described as zeros and ones. Inside the computer, they take forms such as a high or low electrical charge, a strong or weak signal, or a shiny or dull spot on the surface of a CD. Any piece of discrete information can be reduced to a sequence of zeros and ones and thus represented in bits.
 For example, we can express the number 13 in bits. It works the same way as a decimal number, but instead of 10 different digits, you have only 2, and the weight of each increases by a factor of 2 from right to left. Here are the bits that make up the number 13,  the binary number 00001101. Its non-zero digits stand for 8, 4, and 1, and add up to 13.

Most programming is done with programming languages. A programming language is an artificially constructed language used to instruct computers. It is interesting that the most effective way we’ve found to communicate with a computer borrows so heavily from the way we communicate with each other. Like human languages, computer languages allow words and phrases to be combined in new ways, making it possible to express ever new concepts.
At one point language-based interfaces, such as the BASIC and DOS prompts of the 1980s and 1990s, were the main method of interacting with computers. They have largely been replaced with visual interfaces, which are easier to learn but offer less freedom. Computer languages are still there, if you know where to look. One such language, JavaScript, is built into every modern web browser and is thus available on almost every device.  JavaScript was standardized in 1996 by the European Computer Manufacturers Association (ECMA), which is why you sometimes hear it called ECMAScript.
JavaScript is the language of the Web. It started as a way to manipulate a few selected types of elements in a web page (such as images and form fields), but it has grown tremendously. In addition to client-side browser scripting, these days you can use JavaScript to program for an increasing variety of platforms. You can write server-side code (using .NET or Node.js), desktop applications (that work on all operating systems)  and application extensions (e.g., for Firefox or Photoshop), mobile applications, and command-line scripts.

 Besides explaining JavaScript, I will introduce the basic principles of programming. Programming, it turns out, is hard. The fundamental rules are simple and clear, but programs built on top of these rules tend to become complex enough to introduce their own rules and complexity. You’re building your own maze, in a way, and you might just get lost in it.
There will be times when reading this book feels terribly frustrating. If you are new to programming, there will be a lot of new material to digest. Much of this material will then be combined in ways that require you to make additional connections.
It is up to you to make the necessary effort. When you are struggling to follow the book, do not jump to any conclusions about your own capabilities. You are fine—you just need to keep at it. Take a break, reread some material, and make sure you read and understand the example programs and exercises. Learning is hard work, but everything you learn is yours and will make subsequent learning easier.

 A program is many things. It is a piece of text typed by a programmer, it is the directing force that makes the computer do what it does, it is data in the computer’s memory, yet it controls the actions performed on this same memory. Analogies that try to compare programs to objects we are familiar with tend to fall short. A superficially fitting one is that of a machine—lots of  separate parts tend to be involved, and to make the whole thing tick, we have to consider the ways in which these parts interconnect and contribute to the operation of the whole.
A computer is a physical machine that acts as a host for these immaterial machines. Computers themselves can do only stupidly straightforward things. The reason they are so useful is that they do these things at an incredibly high speed. A program can ingeniously combine an enormous number of these simple actions to do very complicated things.
A program is a building of thought. It is costless to build, it is weightless, and it grows easily under our typing hands.



