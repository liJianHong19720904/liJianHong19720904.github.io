1.title
  Developing CET Project With String Algorithm/API （开发篇：字符串算法和API训练——CET项目第1阶段）
2.introduction
  有了前面的代码基础，本课开始我们尝试写一个Web应用程序项目。为配合CET英语考试需要，我们以大学生常用CET单词(5千词)的训练为例，学习String类的常用API、练习字符串处理的技巧和算法，再加入键盘事件的API的学习，为编写CET项目的功能做一些必要的准备。本课程以综合代码开发实践为主，融合贯通了前面的HTML、CSS、JavaScript语言的一些基本技巧。本课按开发阶段共分划分六个小例子，逐步求精的推进项目开发，最后案例6文件，用不到100条代码，基本实现了一个简单的，键盘互动的CET单词训练程序。

3.keyword
  CET ，College English Test ，"use strict" ，search ，substring ，push ，english  ，phonetic ，window.onload ，document.body.onkeypress ，document.body.onkeydown ，function(eObj)  ，eObj.key ，Enter ， Escape , Shift ，Tab  。 
	
4.project
  <a src=cet-1.html title=CET单词输入、处理、输出的三步曲>本例从零开始，面临三个最基本的问题，1、程序中如何获取CET（大学英语等级考试）的单词数据？ 2、如何把单词数据（字符串类型），处理为方便代码表达的数据（对象类型）？3、如何把单词初步输出到Web页面上？解决方案：入了CET6单词库文本字符串数据，通过字符串，利用String类的API，search和substring对构成单词的文本信息进行分析和处理，形成单词对象数据，最后用document.write实现CET6级近六千单词信息在Web页的输出。
  <a src=cet-2.html title=CET单词自动播放器>本例从上例的一点基础开始，探索以下三个问题，1、如何利用强大的CSS语言，为程序设计一个UI，把单词的三大信息重要信息，突出显示在页面上。2、如何随机选取单词，再利用异步代码，实现一个自动播放单词程序？3、代码该如何组织，才能实现函数反复播放单词？ 本例开始，在开发实践中，我们也将深刻理解浏览器端的window.onload事件，本例是理解异步代码的一个入门经典范例。
  <a src=cet-3.html  title=CET逐字母单词自动播放>本例从上例的基础开始，继续探索以下三个问题，1、如何实现单词的字母一一显示，以加强视觉记忆？2、如何运用CSS语言的强大定位能力，实现单词背景提示效果，为下一步的单词提示输入做好UI设计的准备？ 3、如何实现一个移动的光标，以突出当前出现的字母？ 本例运用CSS语言的对元素定位能力，设计和实现单词的提示界面、个性化光标等界面。功能上，本例实现了6秒切换一个单词，0.3秒显示一个当前字母的效果，详细实现请查看相应的代码修改，难点在于嵌套运用异步代码，并利用几个变量和简单算法，让单词能自动实现逐字母出现。
  <a src=cet-4.html>本例大篇幅修改前面代码，删除了自动填入单词的代码，这些单词将来都应由用户键盘输入。本例还利用异步代码，模拟了输入位置光标闪烁功能。
  <a src=cet-5.html>本例利用键盘onkeypress事件API，将键盘输入的字母显示出来，初步实现用键盘拼写单词的功能。
  <a src=cet-6.html>本例在前面基础上，初步完成简易CET6单词拼写训练程序。本例选择功能更强的键盘事件onkeydown，通过这个API和事件对象，结合代码逻辑，不仅将键盘输入的字母显示出来，也让代码能识别编辑的常用键，比如退格按键操作，实现拼错单词时，用户能使用退格删除的功能。最后，还实现了键盘读取回车查询当前单词的详细功能、按Esc键进入下一个单词练习的功能。

5.reading
本版代码（CET第1阶段）后续开发存在的问题
  1、代码逻辑不算非常清晰，在程序修改或扩容功能时，或许会导致推倒重构。
	2、目前程序核心缺乏一个数据模型和UI控制，不同统一记录程序运行状态，导致程序各模块间关系复杂，也就是软件复杂度偏高。
	3、存在bug：比如多次按Escape键，会导致setInterval方法触发的函数代码在多线程并行运行，导致光标闪烁厉害，此时需要增加代码控制每个触发的时钟，但我们在前二个问题彻底解决前，继续增加代码解决这个技术问题的意义不大，我们将把这个问题安排在下一课解决。
	4、前二个问题直接限制了本项目的继续增加功能，否则复杂代码互相关联，会造成变量和数据之间互相纠缠关系，必将会让代码整体陷入无法修改的困境。
  基于以上情况，我们将在下一课（CET开发的第2阶段），进入写代码一个新的高度。通过引入基于对象的MVC设计模式，重新构建代码结构，实现代码组织优化，并在这种优化的代码结构支撑下，增加功能，完善算法，最终实现本课程实践追求的完美目标：通过手写底层Web代码，实现一个高质量的代码项目。