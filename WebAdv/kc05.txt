1.title
 Learn About Programming with HTML/CSS Inheritance （准备篇：编程概述，实践HTML/CSS继承机制）
2.introduction
 编程也是一种理解和深入使用计算机的方法，深刻理解这点后，对学习本课程有意义。比如，我们可以简单地利用计算机现成的软件，完成一些模式化的任务，而对于个性化或一些开放性问题，则很可能不是综合使用软件能解决的 ，或许需要我们分析和理解需求，搭建程序运行环境，编写代码。当我们编程脱离了初学状态，到了一定阶段，本质上就是分析问题和试图用计算机用高效率解决问题。而现代计算机的高性价比，配合互联网强大通信能力，结合人类的抽象思维能力，这就每一个开发者提供了数字化发展机会，也为社会信息化变革带来了巨大的潜力。
 本课的Web代码实践中，在html部分增加了meta语句，实现了对移动端浏览器的viewport概念全屏设置（请在实践案例1，2中，对比手机浏览器端渲染的巨大区别）。在CSS中，增加了对body字体大小属性继承的探索，新增了CSS类的语法设计，同时对上一课的Web元素的重要概念盒装模型（padding、border、margin使用）综合使用温故知新。最后用CSS结合ul和ol元素二种特色列表，设计了二种比较典型的“导肮”栏界面。

3.keyword
  Programming ，complex，instruction ，framework ， abstract thinking  ，<meta name="viewport"> ，content="width=device-width , initial-scale=1"  ，tag.class ，   body{font-size:25px;}  ，p{ font-size:1.5em; } ，margin:0;  ， padding:10px 20px  ， cursor:pointer position:absolute ， left，top ，right ，bottom ;
	 。 
	
4.project
  <a src=program-0.html  title=在CSS样式表建立类的概念>本例提供介绍编程意义的文本，用于简单标记和CSS类的学习实践。
  <a src=program-1.html title=请在移动端浏览器查看本例，与上例对比>本例在上例基础上删除<meta name="viewport">设置，仅用于移动手机端浏览器的实践，本例在PC端效果与上例完全一致。
 
  <a src=program-2.html title=子元素p对body父元素的字体大小属性的继承>本例继续演示子元素p对body父元素的属性继承和变异。
  <a src=program-3.html title=子元素对父元素的继承>本例继续演示子元素h1对body父元素的属性继承和变异。
  <a src=program-4.html title=探索盒装模型概念（消除margin和增加padding）>本例演示Web页的元素的BoxModel各属性的使用，让页面更加完美。
  <a src=program-5.html title=CSS实现的二种经典导航界面> 探索盒装模型概念（“二种经典导航界面”——综合设计盒状模型（以li元素为例）和CSS的元素定位排版。
  
5.reading
 Programming .   Computers are about as common as screwdrivers today, but they are quite a bit more complex, and making them do what you want them to do isn’t always easy.

If the task you have for your computer is a common, well-understood one, such as showing you your email or acting like a calculator, you can open the appropriate application and get to work. But for unique or open-ended tasks, there probably is no application.
That is where programming may come in. Programming is the act of constructing a program——a set of precise instructions telling a computer what to do.

Because computers are dumb, pedantic beasts, programming is fundamentally tedious and frustrating. Fortunately, if you can get over that fact, and maybe even enjoy the rigor of thinking in terms that dumb machines can deal with,  programming can be rewarding.

It allows you to do things in seconds that would take forever by hand. It is a way to make your computer tool do things that it couldn’t do before. And it provides a wonderful exercise in abstract thinking.

Inheritance . Are your eyes the same color as your parents’? Did you inherit their hair color? Well, just as parents pass down traits to their children, styled HTML elements pass down certain style properties to the elements they contain. Inheritance provides a mechanism  for styling elements that don’t have any explicit styles rules of their own .
<img src=inheritance.jpg>This is where an understanding of your document’s structure becomes important.  HTML documents have an implicit structure, or hierarchy. For example, every web page has an html root element that contains a head and a body, and the body contains heading and paragraph elements. A few of the paragraphs, in turn, contain inline elements such as images (img) and emphasized text (em). You can visualize the structure as an upside-down tree, branching out from the root , as shown in the figure (click the button).
<img src=inheritance.jpg> Parents and children . The document tree becomes a family tree when it comes to referring to the relationship between elements. All the elements contained within a given element are said to be its descendants. For example, the h1, h2, p, em, and img elements in the document in figure (click the button) are all descendants of the body element. 
<img src=inheritance.jpg> An element that is directly contained within another element  is said to be the child of that element. Conversely, the containing element is the parent. For example, the em element is the child of the p element, and the p element is its parent. All of the elements higher than a particular element in the hierarchy are its ancestors. Two elements with the same parent are siblings. We don’t refer to “aunts” or “cousins,” so the analogy stops there. This may all seem academic, but it will come in handy when you’re writing CSS selectors .
<img src=inheritance.jpg> Notice that I’ve been saying “certain” properties are inherited. It’s important to note that some style sheet properties inherit and others do not. In general, properties related to the styling of text—font size, color, style, and the like are passed down. Properties such as borders, margins, backgrounds, and so on that affect the boxed area around the element tend not to be passed down. This makes sense when you think about it. For example, if you put a border around a paragraph, you wouldn’t want a border around every inline element (such as em, strong, or a) it contains as well.
<img src=inheritance.jpg>You can use inheritance to your advantage when writing style sheets. For example, if you want all text elements to be blue, you could write separate style rules for every element in the document and set the color to “blue”. A better way would be to write a single style rule that applies the color property to the body element, and let all the elements contained in the body inherit that style . Any property applied to a specific element overrides the inherited values for that property. Going back to the figure example, if we specify that the em element should be orange, that would override the inherited blue setting.
