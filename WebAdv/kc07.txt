1.title
   Output Approaches For JavaScript program （起步篇：JavaScript代码对Web页面和开发者后台的输出）
2.introduction
  任何计算机程序都包含信息输入、数据处理、输出结果三个环节。本课我们介绍JavaScript代码的二种输出形式：一是利用浏览器的文档输出API（document.write和DOM控制），实现对Web浏览器页面的输出； 二是代码直接对后台以命令行（console.log）的方式输出。
  本节课我们将通过四个小案例完成学习，为夯实编码技能，同时在案例中还填加了字符串连接和循环实现算法的目标。

3.keyword
  document ，write ，document.write（API），for(……){……} ， console.log（API） ， document.querySelectorAll（API）  ，Web页的元素变量.textContent ，table , tr (table row) , td (table data) 。 
	
4.project
  <a src=output-1.html>本例用document.write （API）实现HTML元素和文字输出。
  <a src=output-2.html>本例结合抽象的双重循环，用代码动态实现输出字符的生成，再利用document.write实现九九乘法表。
  <a src=output-3.html>本例要打开浏览器的开发者Console面板，才能查看console.log的输出效果。console.log是JavaScript对后台的标准输出方式。桌面的浏览器一般都有专门的界面实现Console功能，也用作开发者对代码的调试。本例用二重循环控制每行字符串生成,再利用console.log实现九九乘法表。
  <a src=output-4.html>本例二重循环控制每行字符串生成,再利用document.querySelectorAll这个强大的API，把每个表格单元格选中，再使用JavaScript代码改变表格单元格（textContent属性），实现输出九九乘法表。另外最后三例都要用到双重循环，需要学习者练习抽象算法。
  
5.reading

<img src=dom.jpg>Most commonly we’ll encounter JavaScript as a way to add interactivity to a page. Whereas the “structural” layer of a page is our HTML markup, and the “presentational” layer of a page is made up of CSS, the third “behavioral” layer is made up of our JavaScript. All of the elements, attributes, and text on a web page can be accessed by scripts using the DOM , which we’ll be looking at in following text, DOM. We can also write scripts that react to user input, altering either the contents of the page, the CSS styles, or the browser’s behavior on the fly. A simple way to think of the DOM is in terms of the document tree as diagrammed in this figure (click the button) .

<img src=dom.jpg> MEET THE DOM .  The DOM gives us a way to access and manipulate the contents of a document. The DOM is a programming interface (an API) for HTML and XML pages. It provides a structured map of the document, as well as a set of methods to interface with the elements contained therein. Effectively, it translates our markup into a format that JavaScript (and other languages) can understand. It sounds pretty dry, I know, but the basic gist is that the DOM serves as a map to all the elements on a page and lets us do things with them. We can use it to find elements by their names or attributes, and then add, modify, or delete elements and their content.

<img src=node.jpg>You saw documents diagrammed in this way when you were learning about CSS selectors.  Each element within the page is referred to as a node. If you think of the DOM as a tree, each node is an individual branch that can contain further branches. But the DOM allows deeper access to the content than CSS because it treats the actual content as a node as well. This figure(click button) shows the structure of the first p element. The element, its attributes, and its contents are all nodes in the DOM’s node tree.
<img src=dom.jpg> The DOM also provides a standardized set of methods and functions through which JavaScript can interact with the elements on our page. Most DOM scripting involves reading from and writing to the document.  There are several ways to use the DOM to find what you want in a document.


