1.title
   JavaScript OverView（起步篇：快速上手现代编程语言JavaSript）
2.introduction
  有了对CS（computer science）和浏览器环境的系统化的理解，加上能用HTML和CSS语言编写脚本基础上，我们就可以快速实现手写JavaScript代码，甚至用代码表达和设计想法了。当然有高级语言（C语言）代码基础的朋友，更可以省略多数JavaScript语法的学习准备。C语言是现代高级程序语言的起源，也是多数大学必修的基础，JavaScript语言上手完全可以从我们熟悉的C语言起步，通过本节课我们用四个小案例，可以实现进入实际Web编程的小目标。

3.keyword
  JavaScript ，C Language family ，variable ，function ， alert（API） ， setTimeout（API）  ，if/else ， = ， > ，< ，+ ， 一对" 或 一对' ，while(){...} ， var 变量名 = {...} 。 
	
4.project
  <a src=bigBang.html>本例用英语词汇学习的方式，尝试对JavaScript的API的第一次接触。
  <a src=var-if-else.html>本例使用变量和if/else逻辑语句的练习，尝试对JavaScript快速入门。
  <a src=instruction-order-1.html>本例探索JavaScript代码和HTML脚本的执行次序，同时可以让我们理解Web代码的运行次序，我们可试试把script元素放到其他几个位置执行。
  <a src=instruction-order-2.html>本例继续探索JS代码和HTML脚本的次序，在HTML页面的标题h1元素诞生之前，运行三段代码,同时为学有余力的学习者引入循环和对象变量的概念。
  
5.reading
Most programming is done with programming languages. A programming language is an artificially constructed language used to instruct computers. It is interesting that the most effective way we’ve found to communicate with a computer borrows so heavily from the way we communicate with each other. Like human languages, computer languages allow words and phrases to be combined in new ways, making it possible to express ever new concepts.
At one point language-based interfaces, such as the BASIC and DOS prompts of the 1980s and 1990s, were the main method of interacting with computers. They have largely been replaced with visual interfaces, which are easier to learn but offer less freedom. Computer languages are still there, if you know where to look. One such language, JavaScript, is built into every modern web browser and is thus available on almost every device.
JavaScript is the language of the Web. It started as a way to manipulate a few selected types of elements in a web page (such as images and form fields), but it has grown tremendously. In addition to client-side browser scripting, these days you can use JavaScript to program for an increasing variety of platforms. You can write server-side code (using .NET or Node.js), desktop applications (that work on all operating systems)  and application extensions (e.g., for Firefox or Photoshop), mobile applications, and command-line scripts.
